#!/bin/sh

# Download script for the precompiled i386-elf toolchain
# ======================================================
# This script tests whether the platform and architecture of the host PC
# is valid and in that case, it downloads a precompiled toolchain package
# from my repository.
# 
# Valid platforms are: Linux, Darwin (MacOS X) and MSYS* (MS-Windows).
# Valid architectures are: i686 (IA-32) and x86_64 (IA-64).
# Anything else (FreeBSD, ARM...) is unsupported and not tested.
# The user might still be able to compile by himself a toolchain and it
# will work, but this script won't help.

# Make sure that we are in the correct folder
cd `dirname $0`

# Check whether we are running a valid system
UNAME_S=`uname -s`
UNAME_M=`uname -m`

case $UNAME_S in
    Darwin)
        OS="apple-darwin"
        ;;
    Linux)
        OS="linux"
        ;;
    MSYS*)
        OS="windows"
        ;;
    *)
        echo "Your platform is not supported, sorry."
        exit 1
        ;;
esac

case $UNAME_M in
    x86_64)
        ARCH="x86_64"
        ;;
    i686)
        ARCH="i686"
        ;;
    *)
        echo "Your architecture is not supported, sorry."
        exit 1
        ;;
esac

DOWNLOAD_PREFIX="https://github.com/danirod/i386-elf-toolchain/releases/download/preview"
# Windows packages are compressed in .zip instead of .bz2
if [ OS == "windows" ]; then
    DOWNLOAD_SUFFIX="$OS-$ARCH.zip"
else
    DOWNLOAD_SUFFIX="$OS-$ARCH.tar.bz2"
fi
BINUTILS_PKG="i386-elf-binutils-$DOWNLOAD_SUFFIX"
GCC_PKG="i386-elf-gcc-$DOWNLOAD_SUFFIX"

# Download the packages
[ -f $BINUTILS_PKG ] || wget "$DOWNLOAD_PREFIX/$BINUTILS_PKG"
[ -f $GCC_PKG ] || wget "$DOWNLOAD_PREFIX/$GCC_PKG"

# Extract them
if [ "$OS" == "windows" ]; then
    unzip $BINUTILS_PKG
    unzip $GCC_PKG
else
    tar -xf $BINUTILS_PKG
    tar -xf $GCC_PKG
fi

# Merge them into a folder named toolchain
rm -rf toolchain
mkdir toolchain # Reset folder
cp -R i386-elf-gcc/* toolchain
cp -R i386-elf-binutils/* toolchain
rm -rf i386-elf-gcc
rm -rf i386-elf-binutils

